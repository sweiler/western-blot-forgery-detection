package forgery.web.model;

import java.util.HashSet;
import java.util.Set;

import forgery.web.PasswordHashService;

/**
 * Represents a single registered user of this application.
 * 
 * @author Simon Weiler <simon.weiler@stud.tu-darmstadt.de>
 * 
 */
public class User {
	private int id;
	private String mail;
	private String pwdHash;
	private String pwdSalt;
	private String authToken;
	private String lastUsedLocalization;


	private Set<UploadedFile> files = new HashSet<UploadedFile>();

	public String getAuthToken() {
		return authToken;
	}

	public void setAuthToken(String authToken) {
		this.authToken = authToken;
	}

	public void setPwdHash(String pwdHash) {
		this.pwdHash = pwdHash;
	}

	public void setPwdSalt(String pwdSalt) {
		this.pwdSalt = pwdSalt;
	}

	public User() {

	}

	public User(String mail, String password) {
		this.mail = mail;
		setPassword(password);
	}

	

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getMail() {
		return mail;
	}

	public void setMail(String mail) {
		this.mail = mail;
	}

	public String getPwdHash() {
		return pwdHash;
	}

	public String getPwdSalt() {
		return pwdSalt;
	}
	public Set<UploadedFile> getFiles() {
		return files;
	}

	public void setFiles(Set<UploadedFile> files) {
		this.files = files;
	}


	/**
	 * Sets the Password with salt and hash.
	 * 
	 * @param hash
	 *            Must be a SHA-256 hash of {@code salt + password}
	 * @param salt
	 *            The salt, which is used for generation of {@code hash}
	 */
	public void setPassword(String hash, String salt) {
		this.pwdHash = hash;
		this.pwdSalt = salt;
	}

	/**
	 * Sets {@link #pwdHash} and {@link #pwdSalt} to the values generated by
	 * {@link PasswordHashService}.
	 * 
	 * @param password
	 *            The plain password for the user
	 */
	public void setPassword(String password) {
		PasswordHashService pwdService = PasswordHashService.instance();
		this.pwdSalt = pwdService.generateSalt();
		this.pwdHash = pwdService.generateHash(password, pwdSalt);
	}

	public void generateAuthToken() {
		this.authToken = PasswordHashService.instance().generateAuthToken();
	}

	public boolean checkPwd(String password) {
		PasswordHashService pwdService = PasswordHashService.instance();
		return pwdService.generateHash(password, pwdSalt).equals(pwdHash);
	}

	public String getLastUsedLocalization() {
		return lastUsedLocalization;
	}

	public void setLastUsedLocalization(String lastUsedLocalization) {
		this.lastUsedLocalization = lastUsedLocalization;
	}
}
